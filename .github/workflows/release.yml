name: Release

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: "Version of already existing release"
        required: true
      release-type:
        description: "'draft' or 'release'"
        required: true
        default: draft
      run-id-of-gradle-source-repack-native-image:
        description: "Run ID of repack tool native image workflow"
        required: false

jobs:
  verify-inputs:
    name: Verify inputs
    runs-on: ubuntu-latest
    steps:
      - name: Verify input release-type
        if: ${{ github.event.inputs.release-type != 'draft' && github.event.inputs.release-type != 'release' }}
        run: |
          echo "Input release-type is '${{ github.event.inputs.release-type }}' which is not allowed. Allowed release-types are 'draft' or 'release'."
          exit 1

  prepare-binaries-klokwrk-tool-gradle-source-repack:
    needs: verify-inputs
    name: Prepare klokwrk-tool-gradle-source-repack binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download binaries for last successful repack workflow
        if: ${{ !github.event.inputs.run-id-of-gradle-source-repack-native-image }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: klokwrk-tool-gradle-source-repack_nativeImageBuild.yml
          workflow_conclusion: success

      - name: Download binaries for repack workflow with provided Run ID
        if: ${{ github.event.inputs.run-id-of-gradle-source-repack-native-image }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: klokwrk-tool-gradle-source-repack_nativeImageBuild.yml
          run_id: ${{ github.event.inputs.run-id-of-gradle-source-repack-native-image }}

      - name: Set execute permissions on binaries
        run: |
          chmod +x klokwrk-tool-gradle-source-repack_${{ github.event.inputs.release-version }}-linux/klokwrk-tool-gradle-source-repack
          chmod +x klokwrk-tool-gradle-source-repack_${{ github.event.inputs.release-version }}-mac/klokwrk-tool-gradle-source-repack

      - name: Compress binaries
        run: |
          mkdir artifacts-klokwrk-tool-gradle-source-repack
          tar -cvzf artifacts-klokwrk-tool-gradle-source-repack/klokwrk-tool-gradle-source-repack_${{ github.event.inputs.release-version }}-linux.tar.gz klokwrk-tool-gradle-source-repack_${{ github.event.inputs.release-version }}-linux/klokwrk-tool-gradle-source-repack
          tar -cvzf artifacts-klokwrk-tool-gradle-source-repack/klokwrk-tool-gradle-source-repack_${{ github.event.inputs.release-version }}-mac.tar.gz klokwrk-tool-gradle-source-repack_${{ github.event.inputs.release-version }}-mac/klokwrk-tool-gradle-source-repack
          zip artifacts-klokwrk-tool-gradle-source-repack/klokwrk-tool-gradle-source-repack_${{ github.event.inputs.release-version }}-java.zip klokwrk-tool-gradle-source-repack_${{ github.event.inputs.release-version }}-jar/*.jar
          zip artifacts-klokwrk-tool-gradle-source-repack/klokwrk-tool-gradle-source-repack_${{ github.event.inputs.release-version }}-win.zip klokwrk-tool-gradle-source-repack_${{ github.event.inputs.release-version }}-win/*.exe

      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: artifacts-klokwrk-tool-gradle-source-repack
          path: artifacts-klokwrk-tool-gradle-source-repack/
          retention-days: 1

  release:
    needs: [verify-inputs, prepare-binaries-klokwrk-tool-gradle-source-repack]
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0    # Generated changelog displays only the changes from checked-out commits. Therefore, we need a full history.

      - name: Download klokwrk-tool-gradle-source-repack binaries
        uses: actions/download-artifact@v2
        with:
          name: artifacts-klokwrk-tool-gradle-source-repack
          path: artifacts-klokwrk-tool-gradle-source-repack

      - name: Setup Java for JReleaser
        uses: actions/setup-java@v3
        with:
          distribution: temurin    # We are using Eclipse Temurin here since it is available locally on GitHub runners (no need to download and install).
          java-version: 11

      - name: Setup current date
        run: |
          echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Run JReleaser
        uses: jreleaser/release-action@v2
        with:
          # You may use "latest" to pull the latest stable release or "early-access" to pull the latest snapshot.
          version: latest
          arguments: full-release --basedir=${{ github.workspace }} --config-file=${{ github.workspace }}/support/jreleaser/jreleaser-${{ github.event.inputs.release-type }}.yml
          setup-java: false
        env:
          CURRENT_DATE: ${{env.CURRENT_DATE}}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_PROJECT_VERSION: ${{ github.event.inputs.release-version }}

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: JReleaser logs
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
            out/jreleaser/release/CHANGELOG.md
