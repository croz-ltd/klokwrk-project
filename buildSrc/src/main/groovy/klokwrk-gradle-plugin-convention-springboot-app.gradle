/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2024 CROZ d.o.o, the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
  id "org.springframework.boot"
}

config {
  publishing {
    setPublications(["groovyModule", "springBootAppModule"])
  }
}

publishing {
  publications {
    springBootAppModule(MavenPublication) {
      artifact bootJar
    }
  }
}

springBoot {
  // Generates META-INF/build-info.properties, which contains (beside other things) version generated by jgitver gradle plugin. That version (and other data from build-info.properties) are than
  // available via BuildProperties bean at runtime.
  buildInfo {
    // Here, we exclude time to get the reproducible build and allow the execution of subsequent tasks, which will not trigger the build again. This way, we can, for example, execute tests and JaCoCo
    // report generation separately without JaCoCo starting test execution again.
    excludes = ["time"]
  }
}

bootBuildImage {
  enabled = true

  // Using dashaun/builder to be able to build images for arm64 or amd64 platforms, depending on a platform where bootBuildImage is run. Default builders still are not multi-architecture aware and
  // can be used only for building amd64 images.
  //
  // Tip: When running on arm64, if you want to force building amd64 image just comment out "dashaun/builder:base" and use defaults.
  //
  // We are using ":base" builder here to be as close as possible to the default behavior that uses "builder-jammy-base:latest" for non GraalVM native images.
  //
  // References:
  // - https://github.com/dashaun/paketo-arm64
  // - https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-with-GraalVM#building-container-images
  // - https://github.com/buildpacks/lifecycle/issues/435
//  builder = "dashaun/builder:tiny" // arm64 on arm CPUs, amd64 on amd CPUs
//  builder = "dashaun/builder:base" // arm64 on arm CPUs, amd64 on amd CPUs

  // default builders (only for reference):
//  builder = "paketobuildpacks/builder-jammy-base:latest" // amd64 only
//  builder = "paketobuildpacks/builder-jammy-tiny:latest" // amd64 only

  // NOTE: Configuring KLOKWRK_USE_DEFAULT_BOOT_IMAGE_BUILDER env variable only makes sense on arm64 machines. If "true", you will get amd64 images. If "false" or unset, you will get arm64 images.
  //       On amd64 machines, you will always get amd64 images, no matter which builder you use. At the moment there is no way to build arm64 images on amd64 machines.
  //
  //       For executing local integration/component tests, you need a local docker image with the same architecture as of your machine. For executing tests on GitHub Actions, we need amd64 images
  //       as there are no available arm64 runners that support virtualization (running docker). Since our GitHub Actions workflows pull our app images from Docker Hub, we have to ensure we have
  //       amd64 app images there.
  //
  //       Therefore, for building local images and running test you don't have to do anything, no matter machine architecture you are using.
  //
  //       However, if you are on Apple Silicon and you want to build docker images for pushing on Docker Hub, you have to set KLOKWRK_USE_DEFAULT_BOOT_IMAGE_BUILDER to "true". On amd64 (Intel based
  //       machines), again you don't have to do anything, since you will get amd64 images in any case and with any builder.
  builder = System.getenv("KLOKWRK_USE_DEFAULT_BOOT_IMAGE_BUILDER")?.equalsIgnoreCase("true") ? "paketobuildpacks/builder-jammy-base" : "dashaun/builder:base"

  // Note: Although Spring Boot Gradle plugin states that it will select the same Java JRE as specified by targetCompatibility property
  //       (https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#build-image.customization), it does not happen (maybe the reason is Groovy plugin).
  //       Anyway, to select a specific version, we have to use BP_JVM_VERSION environment variable.
  environment = ["BP_JVM_VERSION" : "17.*"]

  imageName = "klokwrkprj/${project.name}:${project.version}"
}
