/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2022 CROZ d.o.o, the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
  id "fr.brouillard.oss.gradle.jgitver"
}

jgitver {
  mavenLike true
  policy {
    pattern = "(.*)"
    transformations = ["IGNORE"]
  }
}

// ----- configuring aggregated test reports - start
Map<String, String> testReportConfigMap = [
    "allTestUnitReports": "**/test-results/test/binary/**",
    "allTestIntegrationReports": "**/test-results/testIntegration/binary/**",
    "allTestComponentReports": "**/test-results/testComponent/binary/**",
    "allTestReports": "**/test-results/test*/binary/**"
]

testReportConfigMap.each { testReportConfigMapEntry ->
  String testReportName = testReportConfigMapEntry.key
  String testReportIncludeFilter = testReportConfigMapEntry.value

  String testKind = (testReportName - "allTest" - "Reports").toLowerCase()
  String description = testKind ? "Generates a cumulative report for all $testKind tests." : "Generates a cumulative report for tests of all kinds."

  rootProject.tasks.register(testReportName, TestReport) { TestReport testReport ->
    testReport.group = "reporting"
    testReport.description = description

    testReport.destinationDir = rootProject.layout.buildDirectory.dir("reports/$testReportName").get().asFile

    FileTree fileTree = rootProject.layout.getProjectDirectory().asFileTree.matching({ PatternFilterable patternFilterable -> patternFilterable.include(testReportIncludeFilter) })
    Set<File> directories = fileTree.collect({File file -> file.parentFile })

    testReport.testResultDirs = directories
  }
}
// ----- configuring aggregated test reports - end
