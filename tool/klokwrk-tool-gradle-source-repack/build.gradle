/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020 CROZ d.o.o, the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.internal.deprecation.DeprecatableConfiguration

apply plugin: "io.micronaut.application"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "org.gradle.test-retry"

config {
  coverage {
    jacoco {
      setExcludes(["org/klokwrk/tool/gradle/source/repack/graal/**"] as Set<String>)
    }
  }
}

micronaut {
  testRuntime("spock2")
  enableNativeImage(false)
  processing {
    incremental(true)
    annotations("org.klokwrk.tool.gradle.source.repack.*")
  }
}

application {
  mainClass.set("org.klokwrk.tool.gradle.source.repack.GradleSourceRepackCommand")
}

// Processes resources/version.properties and replaces tokens with provided values.
processResources {
  filteringCharset = "UTF-8"
  filter(ReplaceTokens, tokens: [moduleName: project.name, moduleVersion: project.version])
}

test {
  retry {
    maxRetries = 2
  }
}

configurations {
  graalNativeImageDependencies
}

dependencies {
  graalNativeImageDependencies platform(project(":klokwrk-platform-base"))
  implementation platform(project(":klokwrk-platform-micronaut"))

  graalNativeImageDependencies "io.github.classgraph:classgraph"

  compileOnly "info.picocli:picocli-codegen"
  compileOnly "io.github.classgraph:classgraph"
  compileOnly "org.graalvm.nativeimage:svm"

  implementation "info.picocli:picocli"
  implementation "io.micronaut:micronaut-core"
  implementation "io.micronaut:micronaut-http-client"
  implementation "io.micronaut.picocli:micronaut-picocli"
  implementation "io.reactivex.rxjava2:rxjava"
  implementation "javax.inject:javax.inject"
  implementation "org.codehaus.groovy:groovy"

  testImplementation "com.github.tomakehurst:wiremock-jre8"

  runtimeOnly "ch.qos.logback:logback-classic"
}

Boolean isGraal11() {
  String javaVendorUrl = System.getProperty("java.vendor.url").toLowerCase()
  Integer javaSpecificationVersion = System.getProperty("java.specification.version").toBigDecimal().toInteger()
  return javaVendorUrl.contains("graal") && (javaSpecificationVersion >= 11)
}

Boolean isWindows() {
  return System.getProperty("os.name").toLowerCase().contains("windows")
}

// Simple custom graal image builder task used because of some bugs/missing features in Micronaut task.
// Can be replaced by the Micronaut's one when at least the first of the following bugs is fixed:
// - https://github.com/micronaut-projects/micronaut-gradle-plugin/issues/92
// - https://github.com/micronaut-projects/micronaut-gradle-plugin/issues/93
//
// In addition there is also an issue with missing resources in Micronaut task that causes native image build failing in the presence of both java and groovy source sets. Didn't reported that yet,
// but I guess it will not get much attention since native image for Groovy is not supported.
tasks.register("kwrkNativeImage", Exec) { Exec thisExecTask ->
  doFirst {
    if (!isGraal11()) {
      throw new GradleException("For native image compiling you need to use GraalVM for Java 11 (or newer). Cannot continue.")
    }
  }

  String nativeImageBuilderClasspath = null
  project.configurations { ConfigurationContainer configurationContainer ->
    Set<Configuration> filteredConfigurations = configurationContainer
        .findAll({ Configuration configuration ->
          if (configuration instanceof DeprecatableConfiguration) {
            DeprecatableConfiguration deprecatableConfiguration = (DeprecatableConfiguration) configuration
            if (deprecatableConfiguration.resolutionAlternatives != null) {
              return false
            }
          }

          return true
        })
        .findAll { Configuration configuration ->
          return configuration.canBeResolved
        }
        .findAll({ Configuration configuration ->
          return ["runtimeClasspath", "graalNativeImageDependencies"].contains(configuration.name)
        })

    Set<File> resolvedDependencies = filteredConfigurations.collectMany { Configuration configuration -> configuration.resolve() }

    SourceSet mainSourceSet = project.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)
    FileCollection outputDirs = mainSourceSet.getOutput().getClassesDirs().filter({ File file -> file.exists() })
    File resourcesDir = mainSourceSet.getOutput().getResourcesDir()

    //noinspection GroovyAssignabilityCheck
    nativeImageBuilderClasspath = project.files(resolvedDependencies, outputDirs, resourcesDir).asPath

    return
  }

  File workingDir = new File(project.buildDir, "native-image")
  workingDir.mkdirs()

  JavaApplication javaApplication = project.extensions.getByType(JavaApplication)
  String mainClass = javaApplication.getMainClass().get()

  File mainGraalSourceSetDir = new File(project.projectDir, "src/main/graal")

  String executable = isWindows() ? "native-image.cmd" : "native-image"
  thisExecTask.setExecutable(executable)
  thisExecTask.setWorkingDir(workingDir)
  thisExecTask.setArgs([
      "--verbose",
      "--class-path=$nativeImageBuilderClasspath",
      "--allow-incomplete-classpath",
      "--report-unsupported-elements-at-runtime",
      "--initialize-at-build-time",
      "--initialize-at-run-time=org.codehaus.groovy.control.XStreamUtils,groovy.grape.GrapeIvy",
      "--no-fallback",
      "--no-server",
      "-H:ConfigurationFileDirectories=${ mainGraalSourceSetDir.absolutePath }",
      "-H:DynamicProxyConfigurationFiles=${ mainGraalSourceSetDir.absolutePath }/dynamicProxy-config.json",
//      "-H:+PrintAnalysisCallTree", // Uncomment when detailed reports about GraalVM code analysis are needed.
      "-H:+ReportExceptionStackTraces",
      "-H:Path=${ workingDir.absolutePath }",
      "-H:Class=${ mainClass }",
      "-H:Name=${ project.name }"]
  )
}
