/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020 CROZ d.o.o, the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.internal.deprecation.DeprecatableConfiguration

apply plugin: "io.micronaut.application"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "org.gradle.test-retry"

config {
  coverage {
    jacoco {
      setExcludes(["org/klokwrk/tool/gradle/source/repack/graal/**"] as Set<String>)
    }
  }
}

micronaut {
  testRuntime("spock2")
  enableNativeImage(false)
  processing {
    incremental(true)
    annotations("org.klokwrk.tool.gradle.source.repack.*")
  }
}

application {
  mainClass.set("org.klokwrk.tool.gradle.source.repack.GradleSourceRepackCommand")
}

// Processes resources/version.properties and replaces tokens with provided values.
processResources {
  filteringCharset = "UTF-8"
  filter(ReplaceTokens, tokens: [moduleName: project.name, moduleVersion: project.version])
}

test {
  retry {
    maxRetries = 2
  }
}

configurations {
  graalNativeImageDependencies
}

dependencies {
  graalNativeImageDependencies platform(project(":klokwrk-platform-base"))
  implementation platform(project(":klokwrk-platform-micronaut"))

  graalNativeImageDependencies "io.github.classgraph:classgraph"

  compileOnly "info.picocli:picocli-codegen"
  compileOnly "io.github.classgraph:classgraph"
  compileOnly "org.graalvm.nativeimage:svm"

  implementation "info.picocli:picocli"
  implementation "io.micronaut:micronaut-core"
  implementation "io.micronaut:micronaut-http-client"
  implementation "io.micronaut.picocli:micronaut-picocli"
  implementation "io.reactivex.rxjava2:rxjava"
  implementation "javax.inject:javax.inject"
  implementation "org.codehaus.groovy:groovy"

  testImplementation "com.github.tomakehurst:wiremock-jre8"

  runtimeOnly "ch.qos.logback:logback-classic"
}

Boolean isGraal11() {
  String javaVendorUrl = System.getProperty("java.vendor.url").toLowerCase()
  Integer javaSpecificationVersion = System.getProperty("java.specification.version").toBigDecimal().toInteger()
  return javaVendorUrl.contains("graal") && (javaSpecificationVersion >= 11)
}

Boolean isWindows() {
  return System.getProperty("os.name").toLowerCase().contains("windows")
}

// Simple custom graal image builder task used because of some bugs/missing features in Micronaut task.
// Can be replaced by the Micronaut's one when at least the first of the following bugs is fixed:
// - https://github.com/micronaut-projects/micronaut-gradle-plugin/issues/92
// - https://github.com/micronaut-projects/micronaut-gradle-plugin/issues/93
//
// In addition there is also an issue with missing resources in Micronaut task that causes native image build failing in the presence of both java and groovy source sets. Didn't reported that yet,
// but I guess it will not get much attention since native image for Groovy is not supported.
tasks.register("kwrkNativeImage", Exec) { Exec thisExecTask ->
  doFirst {
    if (!isGraal11()) {
      throw new GradleException("For native image compiling you need to use GraalVM for Java 11 (or newer). Cannot continue.")
    }
  }

  String nativeImageBuilderClasspath = null
  project.configurations { ConfigurationContainer configurationContainer ->
    Set<Configuration> filteredConfigurations = configurationContainer
        .findAll({ Configuration configuration ->
          if (configuration instanceof DeprecatableConfiguration) {
            DeprecatableConfiguration deprecatableConfiguration = (DeprecatableConfiguration) configuration
            if (deprecatableConfiguration.resolutionAlternatives != null) {
              return false
            }
          }

          return true
        })
        .findAll { Configuration configuration ->
          return configuration.canBeResolved
        }
        .findAll({ Configuration configuration ->
          return ["runtimeClasspath", "graalNativeImageDependencies"].contains(configuration.name)
        })

    Set<File> resolvedDependencies = filteredConfigurations.collectMany { Configuration configuration -> configuration.resolve() }

    SourceSet mainSourceSet = project.sourceSets.getByName(SourceSet.MAIN_SOURCE_SET_NAME)
    FileCollection outputDirs = mainSourceSet.getOutput().getClassesDirs().filter({ File file -> file.exists() })
    File resourcesDir = mainSourceSet.getOutput().getResourcesDir()

    //noinspection GroovyAssignabilityCheck
    nativeImageBuilderClasspath = project.files(resolvedDependencies, outputDirs, resourcesDir).asPath

    return
  }

  File workingDir = new File(project.buildDir, "native-image")
  workingDir.mkdirs()

  JavaApplication javaApplication = project.extensions.getByType(JavaApplication)
  String mainClass = javaApplication.getMainClass().get()

  File mainGraalSourceSetDir = new File(project.projectDir, "src/main/graal")

  String executable = isWindows() ? "native-image.cmd" : "native-image"
  thisExecTask.setExecutable(executable)
  thisExecTask.setWorkingDir(workingDir)
  thisExecTask.setArgs([
      // Enables verbose output that display full configuration used for creating a native image.
      "--verbose",

      // A separated list of directories, JAR archives, and ZIP archives to search for class files.
      "--class-path=$nativeImageBuilderClasspath",

      // Allow image building with an incomplete class path. Report type resolution errors at runtime when they are accessed the first time, instead of during image building.
      //
      // Some parts of Groovy core (exposed through groovy-*.jar) are designed to be initialized when accessed at runtime for the first time. At the same time, those Groovy parts expects that
      // corresponding dependencies are available at classpath.
      // These core Groovy parts are reachable during GraalVM static analysis, and static analysis recognises missing dependencies when they are not used. Therefore, we need to allow for incomplete
      // classpath if we do not want native image compilation to fail and stop.
      //
      // To prevent warnings from GraalVM static analysis, incriminating Groovy core classes needs to be added under "initialize-at-run-time" option.
      "--allow-incomplete-classpath",

      // Report usage of unsupported methods and fields at runtime when they are accessed the first time, instead of as an error during image building.
      // Necessary for compiling Groovy apps. Based on native-image tool exception, ot looks like Groovy at runtime determines actual Java version to be used
      // (see org.codehaus.groovy.vmplugin.VMPluginFactory). Therefore, some call paths are not available at compile time depending on Java runtime used during compilation.
      "--report-unsupported-elements-at-runtime",

      // A comma-separated list of packages and classes (and implicitly all of their superclasses) that are initialized during image generation. An empty string designates all packages.
      "--initialize-at-build-time",

      // A comma-separated list of packages and classes (and implicitly all of their subclasses) that must be initialized at runtime and not during image building. An empty string is currently not supported.
      "--initialize-at-run-time=org.codehaus.groovy.control.XStreamUtils,groovy.grape.GrapeIvy",

      // Do not fallback on plain JVM when AOT native image compilation fails.
      "--no-fallback",

      // Build a native image without starting background compilation server as a daemon.
      "--no-server",

      // Comma separated list of directories containing configuration files that are not part of the classpath.
      "-H:ConfigurationFileDirectories=${ mainGraalSourceSetDir.absolutePath }",

      // Comma separated list of resources for specifying a list of interfaces that dynamic proxy classes (generated at native image build time) implement.
      "-H:DynamicProxyConfigurationFiles=${ mainGraalSourceSetDir.absolutePath }/dynamicProxy-config.json",

//      // Enables creation of detailed reports about GraalVM code analysis.
//      "-H:+PrintAnalysisCallTree",
//
//      // Enables creation of detailed report about objects included in the native image heap.
//      "-H:+PrintImageObjectTree",

      // Print stacktrace of underlying exceptions.
      "-H:+ReportExceptionStackTraces",

      // The directory where the generated executable is placed.
      "-H:Path=${ workingDir.absolutePath }",

      // The class containing the default entry point method.
      "-H:Class=${ mainClass }",

      // The name of the executable file that is generated.
      "-H:Name=${ project.name }"
  ])
}
