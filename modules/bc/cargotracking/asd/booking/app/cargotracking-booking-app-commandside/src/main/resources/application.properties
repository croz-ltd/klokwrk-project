#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2020-2024 CROZ d.o.o, the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

spring.application.name = cargotracking-booking-app-commandside
spring.threads.virtual.enabled = true

server.port = 8080
server.servlet.context-path = /cargotracking-booking-app-commandside
server.shutdown = graceful

axon.axonserver.servers = ${CARGOTRACKING_AXON_SERVER_HOSTNAME:localhost}:${CARGOTRACKING_AXON_SERVER_PORT_GRPC:8124}
axon.serializer.general = JACKSON

management.endpoints.web.base-path = /management
management.endpoints.web.exposure.include = *
management.info.git.mode = simple
# Note: show-details and show-values are set to always only because we do not have security yet. Otherwise, they should be set to at least to "when_authorized"
management.endpoint.health.show-details = always
management.endpoint.configprops.show-values=always
management.endpoint.env.show-values=always

### Observability - start
#### Metrics
management.defaults.metrics.export.enabled = false
management.endpoint.metrics.enabled = true
axon.metrics.auto-configuration.enabled = true
axon.metrics.micrometer.dimensional = true
##### Common tags (dimensions in Prometheus terms) that Spring Boot will apply to every metric
management.metrics.tags.app = ${spring.application.name}
#### Tracing
management.tracing.enabled = true
##### For production use, set sampling.probability to 0.1
management.tracing.sampling.probability = 1.0
##### For production use, set to false
jdbc.datasource-proxy.include-parameter-values = true
##### Grafana OpenTelemetry Protocol config
grafana.otlp.enabled = false
grafana.otlp.on-prem.endpoint = http://localhost:4317
grafana.otlp.on-prem.protocol = grpc
### Observability - end

spring.messages.basename = messages,responseFormattingDefaultMessages,cargotracking-booking-lib-out-customer-messages

# Common logging pattern
#logging.pattern.console = ${CONSOLE_LOG_PATTERN:%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(${PID:-}){magenta} %clr([%50.50t]){faint} %clr(%-60.60logger{59}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}
# Logging pattern with traceId and spanId included
logging.pattern.console = ${CONSOLE_LOG_PATTERN:%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(${PID:-}){magenta} %clr([%50.50t]){faint} %clr([traceId:%33.33X{traceId:-n/a}, spanId:%17.17X{spanId:-n/a}]){faint} %clr(%-60.60logger{59}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}

# To see command handler executions.
logging.level.cargotracking-lib-axon-logging.command-handler-logger = DEBUG
# To see event sourcing handler executions.
logging.level.cargotracking-lib-axon-logging.eventsourcing-handler-logger = DEBUG
logging.level.org.axonframework.eventsourcing = DEBUG
# To see the original exception stacktrace (before remoting) thrown in axon command handlers.
logging.level.org.klokwrk.cargotracking.lib.axon.cqrs.command.CommandHandlerExceptionInterceptor = DEBUG
