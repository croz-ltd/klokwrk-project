#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2020-2023 CROZ d.o.o, the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

spring.datasource.url = jdbc:postgresql://${CARGOTRACKING_POSTGRES_HOSTNAME:localhost}:${CARGOTRACKING_POSTGRES_PORT:5432}/cargotracking_booking_query_database
spring.datasource.driverClassName = org.postgresql.Driver
spring.datasource.username = cargotracking
spring.datasource.password = cargotracking
spring.datasource.hikari.auto-commit = false

spring.jpa.hibernate.ddl-auto = none
spring.jpa.open-in-view = false
spring.jpa.properties.hibernate.dialect = org.klokwrk.lib.lo.hibernate.dialect.PostgreSqlAxonDialect

# Delays database connection acquisition. For this to work, auto-commit must be disabled on connection pool level.
# https://vladmihalcea.com/why-you-should-always-use-hibernate-connection-provider_disables_autocommit-for-resource-local-jpa-transactions/
spring.jpa.properties.hibernate.connection.provider_disables_autocommit = true

# Configures time zone for JDBC driver to use when converting local JVM date/time values into database timestamps.
# As a rule of thumb, it's much easier if all date/time values are stored in the UTC format and, if necessary, handle time zone conversions in the UI only. We need both the JDBC driver and the
# database to use the UTC as default time zone for this to work consistently.
# This property handles the default time zone for JDBC driver part. For complete configuration, we also have to ensure that the default time zone of the database is UTC.
# Some databases handle time zones better than the others (i.e., timestamptz data type in PostgreSQL). Still, at the application and ORM level, we want to avoid dependency on the concrete database
# wherever possible. We can achieve that for date/time values by using UTC when converting them into database timestamps.
# Such application-level handling is also suitable for CQRS/ES projections as they may freely choose their concrete database.
# https://vladmihalcea.com/how-to-store-date-time-and-timestamps-in-utc-time-zone-with-jdbc-and-hibernate/
# https://vladmihalcea.com/date-timestamp-jpa-hibernate/
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Causes an exception when Hibernate detects that pagination over collection is executed in memory.
# Detected by Hypersistence Optimizer and explained in:
# https://vladmihalcea.com/hibernate-query-fail-on-pagination-over-collection-fetch/
# https://vladmihalcea.com/fix-hibernate-hhh000104-entity-fetch-pagination-warning-message/
spring.jpa.properties.hibernate.query.fail_on_pagination_over_collection_fetch = true

# Configures Hibernate to optimize queries with IN clause by padding the number of parameters until the next power of 2.
# Detected by Hypersistence Optimizer and explained in https://vladmihalcea.com/improve-statement-caching-efficiency-in-clause-parameter-padding/
spring.jpa.properties.hibernate.query.in_clause_parameter_padding = true

# Following 2 properties configure number of entries in Hibernate query plan cache.
# Property plan_cache_max_size configures the total size of cache used by JPQL and native queries. Default is 2048.
# For JPQL queries, the entry in the cache is compiled AST tree. For native queries, the cache entry contains only parameter binding and query return type.
# Property plan_parameter_metadata_max_size configures the portion of the cache used for native query parameter binding and query return type. Default is 128.
# Detected by Hypersistence Optimizer and explained in https://vladmihalcea.com/hibernate-query-plan-cache/
spring.jpa.properties.hibernate.query.plan_cache_max_size = 4096
spring.jpa.properties.hibernate.query.plan_parameter_metadata_max_size = 256

spring.jpa.properties.hibernate.show_sql = false

logging.level.klokwrk.datasourceproxy.queryLogger = DEBUG
logging.level.klokwrk.datasourceproxy.slowQueryLogger = WARN
