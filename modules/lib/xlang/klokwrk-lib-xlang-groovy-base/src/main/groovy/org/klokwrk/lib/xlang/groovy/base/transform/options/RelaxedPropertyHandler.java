/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020-2023 CROZ d.o.o, the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.klokwrk.lib.xlang.groovy.base.transform.options;

import groovy.transform.options.DefaultPropertyHandler;
import org.codehaus.groovy.ast.ClassNode;
import org.codehaus.groovy.ast.PropertyNode;
import org.codehaus.groovy.ast.expr.MapExpression;
import org.codehaus.groovy.ast.stmt.BlockStatement;
import org.codehaus.groovy.transform.AbstractASTTransformation;
import org.codehaus.groovy.transform.MapConstructorASTTransformation;

import java.util.List;

import static org.codehaus.groovy.ast.tools.GeneralUtils.assignS;
import static org.codehaus.groovy.ast.tools.GeneralUtils.equalsNullX;
import static org.codehaus.groovy.ast.tools.GeneralUtils.ifS;
import static org.codehaus.groovy.ast.tools.GeneralUtils.varX;

/**
 * Same as {@link DefaultPropertyHandler} except this implementation removes from the generated map constructor the check which verifies if all properties of supplied map parameter exist on the
 * annotated class.
 * <p/>
 * Here is the usage example:
 *
 * <pre>
 *   &#64;PropertyOptions(propertyHandler = RelaxedPropertyHandler)
 *   &#64;MapConstructor
 *   class MyClass {
 *     String first
 *     String last
 *   }
 * </pre>
 * <p/>
 * To better understand the problem, lets look at an example what is happening when default {@link groovy.transform.MapConstructor} is used. {@link DefaultPropertyHandler} (which is used by default
 * for the map constructor generated by {@link groovy.transform.MapConstructor}) will cause {@link groovy.lang.MissingPropertyException} in the following code:
 *
 * <pre>
 *   import groovy.transform.MapConstructor
 *
 *   &#64;MapConstructor
 *   class MyClass {
 *     String first
 *     String last
 *   }
 *
 *   class MyOtherClass {
 *     String first
 *     String last
 *     String address
 *   }
 *
 *   MyOtherClass myOtherInstance = new MyOtherClass(first: "someFirst", last: "someLast", address: "someAddress")
 *   MyClass myClass = new MyClass(myOtherInstance.properties)  // throws groovy.lang.MissingPropertyException: No such property: address for class: MyClass
 * </pre>
 *
 * Relevant generated map constructor's code looks something like this:
 *
 * <pre>
 *   public MyClass(java.util.Map args) {
 *     if (args == null) {
 *       args = [:]
 *     }
 *
 *     org.codehaus.groovy.transform.ImmutableASTTransformation.checkPropNames(this,args) // this validates if all keys of input map exist as properties on the annotated class
 *     if (args.containsKey('first')) {
 *       this.first = args.get('first')
 *     }
 *
 *     if (args.containsKey('last')) {
 *       this.last = args.get('last')
 *     }
 *   }
 * </pre>
 *
 * As example shows, {@link groovy.transform.MapConstructor} generates a check which verifies that all keys of supplied map parameter exists on the annotated class. This is not convenient
 * when one wants to use only properties of the parameter map which actually exist on targeted annotated class. Since generated map constructor code already selects by name only input map keys that
 * exists as properties on the annotated class, additional check is not really necessary and is removed by this property handler.
 * <p/>
 */
public class RelaxedPropertyHandler extends DefaultPropertyHandler {
  @Override
  public boolean validateProperties(AbstractASTTransformation xform, BlockStatement body, ClassNode cNode, List<PropertyNode> props) {
    if (xform instanceof MapConstructorASTTransformation) {
      body.addStatement(ifS(equalsNullX(varX("args")), assignS(varX("args"), new MapExpression())));
    }

    return true;
  }
}
