/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020 CROZ d.o.o, the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// =================================================
// configuring "testIntegration" source set -- start
// -------------------------------------------------
apply plugin: "org.gradle.test-retry"

// TODO dmurat: move testIntegration source set creation into the Gradle plugin.
sourceSets {
  testIntegration {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output

    java {
      outputDir = file("build/classes/groovy/testIntegration")
      srcDirs = [file("src/testIntegration/groovy")]
    }

    resources {
      srcDirs = [file("src/testIntegration/resources")]
    }
  }
}

configurations {
  testIntegrationImplementation.extendsFrom testImplementation
  testIntegrationRuntimeOnly.extendsFrom testRuntimeOnly
}

/**
 * Converts Gradle project properties (i.e. properties specified via gradle.properties file) with 'DockerImageVersion' suffix into Java system properties.
 * This way all versions with DockerImageVersion suffix can be used by Testcontainers factories that create and start containers.
 */
void convertDockerImageVersionsIntoJavaSystemPropertiesForTestTask(Test testTask, Project project) {
  Map<String, String> dockerImageVersions = project.getRootProject().properties.findAll { String key, Object value ->
    (value instanceof String) && key.toLowerCase().endsWith("DockerImageVersion".toLowerCase())
  } as Map<String, String>

  dockerImageVersions.each { String key, String value ->
    testTask.systemProperty(key, value)
  }
}

tasks.register("testIntegration", Test) { Test testIntegrationTask ->
  description = "Runs integration tests."
  group = "verification"

  convertDockerImageVersionsIntoJavaSystemPropertiesForTestTask(testIntegrationTask, project)
  testIntegrationTask.useJUnitPlatform()

  testClassesDirs = sourceSets.testIntegration.output.classesDirs
  classpath = sourceSets.testIntegration.runtimeClasspath

  jvmArgs = ["-noverify", "-XX:TieredStopAtLevel=1"]

  // Docker based tests in CI environments (like GitHub Actions) may be flaky. Therefore, we will retry 2 times (3 test execution in total) before giving up.
  retry {
    maxRetries = 2
  }
}

idea {
  module {
    // Required for IDEA to mark sources from testIntegration source set as test sources.
    testSourceDirs += file("src/testIntegration/groovy")
    testResourceDirs += file("src/testIntegration/resources")
  }
}
// -----------------------------------------------
// configuring "testIntegration" source set -- end
// ===============================================

dependencies {
  // Need to have Groovy as implementation dependency (instead as only testIntegrationImplementation dependency) as otherwise groovydoc task fails.
  implementation "org.codehaus.groovy:groovy"

  testIntegrationImplementation project(":cargotracker-booking-commandside-test-support")
  testIntegrationImplementation project(":cargotracker-booking-queryside-test-support")

  testIntegrationImplementation "org.apache.httpcomponents:fluent-hc"
  testIntegrationImplementation "org.apache.httpcomponents:httpclient"
  testIntegrationImplementation "org.awaitility:awaitility"
  testIntegrationImplementation "org.codehaus.groovy:groovy"
  testIntegrationImplementation "org.codehaus.groovy:groovy-json"
  testIntegrationImplementation "org.codehaus.groovy:groovy-sql"
  testIntegrationImplementation "org.spockframework:spock-core"
  testIntegrationImplementation "org.testcontainers:postgresql"
  testIntegrationImplementation "org.testcontainers:testcontainers"

  testIntegrationRuntimeOnly "ch.qos.logback:logback-classic"
  testIntegrationRuntimeOnly "org.postgresql:postgresql"
}
