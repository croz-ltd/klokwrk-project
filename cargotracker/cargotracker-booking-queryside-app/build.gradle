apply plugin: "org.springframework.boot"

// =================================================
// configuring "testIntegration" source set -- start
// -------------------------------------------------
// TODO dmurat: move testIntegration source set creation into the Gradle plugin.
sourceSets {
  testIntegration {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output

    java {
      outputDir = file("build/classes/groovy/testIntegration")
      srcDirs = [file("src/testIntegration/groovy")]
    }

    resources {
      srcDirs = [file("src/testIntegration/resources")]
    }
  }
}

configurations {
  testIntegrationImplementation.extendsFrom testImplementation
  testIntegrationRuntimeOnly.extendsFrom testRuntimeOnly
}

/**
 * Converts Gradle project properties (i.e. properties specified via gradle.properties file) with 'DockerImageVersion' suffix into Java system properties.
 * This way all versions with DockerImageVersion suffix can be used by Testcontainers factories that create and start containers.
 */
void convertDockerImageVersionsIntoJavaSystemPropertiesForTestTask(Test testTask, Project project) {
  Map<String, String> dockerImageVersions = project.getRootProject().properties.findAll { String key, Object value ->
    (value instanceof String) && key.toLowerCase().endsWith("DockerImageVersion".toLowerCase())
  } as Map<String, String>

  dockerImageVersions.each { String key, String value ->
    testTask.systemProperty(key, value)
  }
}

tasks.register("testIntegration", Test) { Test testIntegrationTask ->
  description = "Runs integration tests."
  group = "verification"

  convertDockerImageVersionsIntoJavaSystemPropertiesForTestTask(testIntegrationTask, project)
  testIntegrationTask.useJUnitPlatform()

  testClassesDirs = sourceSets.testIntegration.output.classesDirs
  classpath = sourceSets.testIntegration.runtimeClasspath

  jvmArgs = ["-noverify", "-XX:TieredStopAtLevel=1"]
}

idea {
  module {
    // Required for IDEA to mark sources from testIntegration source set as test sources.
    testSourceDirs += file("src/testIntegration/groovy")
    testResourceDirs += file("src/testIntegration/resources")
  }
}
// -----------------------------------------------
// configuring "testIntegration" source set -- end
// ===============================================

// https://docs.gradle.org/current/userguide/upgrading_version_6.html#publishing_spring_boot_applications
configurations {
  [apiElements, runtimeElements].each {
    it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
    it.outgoing.artifact(bootJar)
  }
}

springBoot {
  // Generates META-INF/build-info.properties, which contains (beside other things) version generated by jgitver gradle plugin. That version (and other data from build-info.properties) are than
  // available via BuildProperties bean at runtime.
  buildInfo {
    properties {
      // Update build time only when "assemble" task is in the graph (https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#integrating-with-actuator-build-info).
      // Note that the build still is not reproducible with this change, but the execution of separate tasks after "assemble" will not update build time anymore. This way, we can, for example,
      // execute tests and JaCoCo report generation separately without JaCoCo triggering test execution again.
      gradle.taskGraph.whenReady { taskGraph ->
        if (!taskGraph.hasTask(":assemble")) {
          time = null
        }
      }
    }
  }
}

bootJar {
  layered {
    includeLayerTools = false
  }
}

bootBuildImage {
  enabled = true
  environment = ["BP_JVM_VERSION" : "11.*"]
  imageName = "${project.name}:${project.version}"
}

dependencies {
  implementation project(":cargotracker-booking-queryside-rdbms-projection-querymodel")
  implementation project(":cargotracker-lib-axon-cqrs")
  implementation project(":cargotracker-lib-axon-logging")
  implementation project(":cargotracker-lib-boundary-api")
  implementation project(":cargotracker-lib-web")
  implementation project(":klokwrk-lib-datasourceproxy-springboot")
  implementation project(":klokwrk-lib-hibernate")
  implementation project(":klokwrk-lib-jackson-springboot")
  implementation project(":klokwrk-lang-groovy")

  implementation "org.axonframework:axon-spring-boot-starter"
  implementation "org.codehaus.groovy:groovy"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-data-jpa"
  implementation "org.springframework.boot:spring-boot-starter-web"

  runtimeOnly "com.wavefront:wavefront-spring-boot-starter"
  runtimeOnly "io.opentracing.contrib:opentracing-spring-cloud-starter"
  runtimeOnly "org.axonframework.extensions.tracing:axon-tracing-spring-boot-starter"
  runtimeOnly "org.postgresql:postgresql"

  testIntegrationImplementation project(":cargotracker-booking-axon-api")
  testIntegrationImplementation project(":cargotracker-booking-commandside-test-support")
  testIntegrationImplementation project(":cargotracker-booking-queryside-test-support")
  testIntegrationImplementation project(":cargotracker-lib-axon-api")

  testIntegrationImplementation "org.awaitility:awaitility"
  testIntegrationImplementation "org.codehaus.groovy:groovy-sql"
  testIntegrationImplementation "org.spockframework:spock-core"
  testIntegrationImplementation "org.springframework:spring-test"
  testIntegrationImplementation "org.springframework.boot:spring-boot-test"
  testIntegrationImplementation "org.testcontainers:postgresql"
  testIntegrationImplementation "org.testcontainers:testcontainers"

  testIntegrationRuntimeOnly "org.spockframework:spock-spring"
}
