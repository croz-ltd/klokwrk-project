spring.application.name: booking-commandside-app

server.port: 8080
server.servlet.context-path: /booking-commandside

axon.axonserver.servers: ${CARGO_TRACKER_AXON_SERVER_HOSTNAME:localhost}:${CARGO_TRACKER_AXON_SERVER_PORT_GRPC:8124}
axon.serializer.general: JACKSON

management.endpoints.web.base-path: /management
management.endpoints.web.exposure.include: '*'
management.endpoint.health.show-details: when_authorized
management.info.git.mode: simple

spring.messages.basename: messages,responseFormattingDefaultMessages

logging.pattern.console: "${CONSOLE_LOG_PATTERN:%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(${PID:-}){magenta} %clr([%100.100t]){faint} %clr(%-60.60logger{59}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}"

logging.level.cargotracker.axon.command-handler-logging: DEBUG       # To see command handler executions.
logging.level.cargotracker.axon.eventsourcing-handler-logging: DEBUG # To see event sourcing handler executions.
logging.level.org.axonframework.eventsourcing: DEBUG
logging.level.org.hibernate.SQL: DEBUG  # To see hibernate statements without parameters
logging.level.org.hibernate.type: TRACE # To see parameters bound to hibernate statements
logging.level.net.croz.cargotracker.infrastructure.project.axon.cqrs.messagehandler.CommandHandlerTrait: DEBUG # To see original exception stacktrace (before remoting) thrown in axon command handlers.
