apply plugin: "org.springframework.boot"

// =================================================
// configuring "testIntegration" source set -- start
// -------------------------------------------------
// TODO dmurat: move testIntegration source set creation into the Gradle plugin.
sourceSets {
  testIntegration {
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output

    java {
      outputDir = file("build/classes/groovy/testIntegration")
      srcDirs = [file("src/testIntegration/groovy")]
    }

    resources {
      srcDirs = [file("src/testIntegration/resources")]
    }
  }
}

configurations {
  testIntegrationImplementation.extendsFrom testImplementation
  testIntegrationRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register("testIntegration", Test) { Test testIntegrationTask ->
  description = "Runs integration tests."
  group = "verification"

  testIntegrationTask.useJUnitPlatform()

  testClassesDirs = sourceSets.testIntegration.output.classesDirs
  classpath = sourceSets.testIntegration.runtimeClasspath

  // TODO dmurat: remove this check when https://github.com/spockframework/spock/issues/1177 gets fixed.
  if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
    // NOTE: "-noverify" option must not be included for JDK 1.8. Otherwise, Spock's "thrown()" method results in IllegalAccessError.
    jvmArgs = ["-XX:TieredStopAtLevel=1"]
  }
  else {
    jvmArgs = ["-noverify", "-XX:TieredStopAtLevel=1"]
  }
}

idea {
  module {
    // Required for IDEA to mark sources from testIntegration source set as test sources.
    testSourceDirs += file("src/testIntegration/groovy")
    testResourceDirs += file("src/testIntegration/resources")
  }
}
// -----------------------------------------------
// configuring "testIntegration" source set -- end
// ===============================================

configurations {
  [apiElements, runtimeElements].each {
    it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
    it.outgoing.artifact(bootJar)
  }
}

springBoot {
  // Generates META-INF/build-info.properties, which contains (beside other things) version generated by jgitver gradle plugin. That version (and other data from build-info.properties) are than
  // available via BuildProperties bean at runtime.
  buildInfo {
    properties {
      // Update build time only when "assemble" task is in the graph (https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#integrating-with-actuator-build-info).
      // Note that the build still is not reproducible with this change, but the execution of separate tasks after "assemble" will not update build time anymore. This way, we can, for example,
      // execute tests and JaCoCo report generation separately without JaCoCo triggering test execution again.
      gradle.taskGraph.whenReady { taskGraph ->
        if (!taskGraph.hasTask(":assemble")) {
          time = null
        }
      }
    }
  }
}

bootBuildImage {
  enabled = false
}

dependencies {
  implementation project(":cargotracker-booking-axon-api")
  implementation project(":cargotracker-booking-domain-model")
  implementation project(":cargotracker-booking-queryside-rdbms-projection-querymodel")
  implementation project(":cargotracker-lib-axon-api")
  implementation project(":cargotracker-lib-axon-logging")
  implementation project(":cargotracker-lib-boundary-api")
  implementation project(":klokwrk-lib-datasourceproxy-springboot")
  implementation project(":klokwrk-lib-hibernate")
  implementation project(":klokwrk-lib-jackson-springboot")

  // Note: although currently there is no direct code dependencies to the klokwrk-lang-groovy module, need to have it as implementation dependency for CompileStatic to work. Otherwise,
  // java.lang.NoClassDefFoundError id thrown for PostMapConstructorCheckable class.
  implementation project(":klokwrk-lang-groovy")

  implementation "org.axonframework:axon-spring-boot-starter"
  implementation "org.codehaus.groovy:groovy"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-data-jpa"
  implementation "org.springframework.boot:spring-boot-starter-web"

  runtimeOnly "com.wavefront:wavefront-spring-boot-starter"
  runtimeOnly "io.opentracing.contrib:opentracing-spring-cloud-starter"
  runtimeOnly "org.axonframework.extensions.tracing:axon-tracing-spring-boot-starter"
  runtimeOnly "org.postgresql:postgresql"
}
