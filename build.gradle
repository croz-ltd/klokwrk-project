/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2020 CROZ d.o.o, the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
  repositories {
    gradlePluginPortal()
    mavenCentral()
    jcenter()
  }

  dependencies {
    classpath "fr.brouillard.oss.gradle:gradle-jgitver-plugin:$gradleJgitverPluginVersion"
    classpath "org.kordamp.gradle:groovy-project-gradle-plugin:$gradleKordampPluginVersion"
    classpath "org.kordamp.gradle:jacoco-gradle-plugin:$gradleKordampPluginVersion"
    classpath "org.kordamp.gradle:publishing-gradle-plugin:$gradleKordampPluginVersion"
    classpath "org.kordamp.gradle:testing-gradle-plugin:$gradleKordampPluginVersion"
    classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
  }
}

repositories {
  mavenCentral()
  jcenter()
}

apply plugin: "fr.brouillard.oss.gradle.jgitver"
jgitver {
  mavenLike true
  policy {
    pattern = "(.*)"
    transformations = ["IGNORE"]
  }
}

apply plugin: "org.kordamp.gradle.codenarc"
apply plugin: "org.kordamp.gradle.groovy-project"
apply plugin: "org.kordamp.gradle.jacoco"
apply plugin: "org.kordamp.gradle.testing"

config {
  setRelease(true)

  info {
    setName(rootProject.name)
    setDescription("Showcase and blueprint for implementing elaborated distributed systems on JVM.")
    setInceptionYear("2020")

    links {
      setWebsite("https://github.com/croz-ltd/klokwrk-project")
      setScm("https://github.com/croz-ltd/klokwrk-project")
      setIssueTracker("https://github.com/croz-ltd/klokwrk-project/issues")
    }

    organization {
      setName("CROZ d.o.o.")
      setUrl("https://croz.net/")
    }

    people {
      person {
        setId("dmurat")
        setName("Damir Murat")
        setRoles(["developer", "architect"])
      }
    }
  }

  licensing {
    // Disable licensing checks and adding them in files, but still use metadata in generated POMs.
    // Unfortunatelly, when enabled, Gradle deprecation warnings appear (https://github.com/hierynomus/license-gradle-plugin/issues/179). Therefore, I'm disabling it by default.
    // If license checking is needed, or adding license headers in new files is needed, or one wants to generate aggregated license report, enable it and run "gw license", "gw licenseFormat" or
    // "gw aggregateLicenseReport".
    // Then disable it out again if underlying plugin is not updated in the meantime.
    setEnabled(false)

    setExcludes(["**/.gitkeep", "**/*.gdsl"] as Set<String>)

    licenses {
      license {
        setId("Apache-2.0")
        setPrimary(true)
        setName("Apache License, Version 2.0")
        setUrl("https://opensource.org/licenses/Apache-2.0")
      }
    }
  }

  buildInfo {
    // To enable reproducible builds, and avoid re-executing gradle tasks on each run because of changes in JAR manifests.
    setSkipBuildTime(true)
    setSkipBuildDate(true)
  }

  coverage {
    jacoco {
      setToolVersion("$jacocoVersion")
    }
  }

  docs {
    groovydoc {
      // If one don't want to execute groovydoc as part of the assemble task, use gradle CLI task exclusion. For example: gw clean assemble -x groovydocJar
      // It also very useful to know which tasks exactly are part of task graph during execution. For that use: gw clean assemble -m

      setReplaceJavadoc(true)
      setIncludes(["**/*.groovy"] as Set)

      options {
        setUse(true)

        // Links to Groovy APIs are provided by plugin
        link(
            "https://docs.oracle.com/en/java/javase/11/docs/api/java.base",
            "java.io.", "java.lang.", "java.math.", "java.net.", "java.nio.", "java.security.", "java.text.", "java.time.", "java.util.", "javax.crypto.", "javax.net.", "javax.security."
        )
        link("https://docs.spring.io/spring-boot/docs/current/api/", "org.springframework.boot.")
        link("https://docs.spring.io/spring-framework/docs/current/javadoc-api", "org.aopalliance.", "org.springframework.")
        link("https://apidocs.axoniq.io/4.3/", "org.axonframework.", "io.axoniq.axonserver.grpc.")
      }
    }
  }

  quality {
    codenarc {
      setIgnoreFailures(true)
      setConfigFile(file("support/codenarc/codenarc.groovy"))
    }
  }
}

configure(subprojects) { Project subproject ->
  group = "org.klokwrk.project"

  configurations {
    all {
      resolutionStrategy {
        // prevent caching for snapshot dependencies
        //noinspection GroovyAssignabilityCheck
        cacheChangingModulesFor(0, "seconds")
      }
    }
  }

  if (["platform", "cargotracker", "lib", "lang"].contains(subproject.name) || subproject.projectDir.parent.endsWith("platform")) {
    return
  }

  repositories {
    mavenCentral()
    jcenter()
  }

  apply plugin: "groovy"
  apply plugin: "idea"
  apply plugin: "org.kordamp.gradle.publishing"

  java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
  }

  test {
    jvmArgs = ["-noverify", "-XX:TieredStopAtLevel=1"]
    useJUnitPlatform()
  }

  // When Groovy project contains Java files, and these Java files contain javadoc comments, javaparser-core needs to be added into groovydoc classpath (otherwise, groovydoc task might fail).
  // Do note that javaparser-core is a dependency of groovy-groovydoc, and its version should be updated when Groovy version changes.
  // Helpful documentation link: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/GroovyRuntime.html
  Closure<FileCollection> createGroovyDocGroovyClasspath = { Project project ->
    Dependency javaParserDependency = project.getDependencies().create("com.github.javaparser:javaparser-core:$javaparserCoreVersion")
    FileCollection javaParserDependencyFileCollection = project.getConfigurations().detachedConfiguration(javaParserDependency)

    FileCollection groovyClasspath = project.groovyRuntime.inferGroovyClasspath(configurations.runtimeClasspath) + javaParserDependencyFileCollection
    return groovyClasspath
  }

  // Sometimes groovydoc needs additional dependencies in its classpath. With configuration bellow each subproject can configure additional groovydoc dependencies by using
  // groovydocExtendedClasspath. For example:
  //
  //   dependencies {
  //     ...
  //     groovydocExtendedClasspath "org.apache.tomcat.embed:tomcat-embed-core"
  //   }
  configurations {
    groovydocExtendedClasspath.extendsFrom(runtimeClasspath)
  }

  groovydoc {
    groovyClasspath = createGroovyDocGroovyClasspath(subproject) + subproject.configurations.groovydocExtendedClasspath
  }

  config {
    info {
      setName(subproject.name)
      setDescription(subproject.description == rootProject.description ? subproject.name : subproject.description)
    }

    publishing {
      setPublications(["myLibrary"])
    }
  }

  publishing {
    publications {
      myLibrary(MavenPublication) {
        from components.java
      }
    }
  }

  // NOTE: This fixes IDEA configuration of Groovy projects and this is necessary for IDEA to recognize spring metadata files generated by Spring Boot annotation processing.
  //       - https://youtrack.jetbrains.com/issue/IDEA-215137
  //       - https://youtrack.jetbrains.com/issue/IDEA-211520
  idea {
    module {
      inheritOutputDirs = false
      outputDir = file("build/classes/groovy/main")
      testOutputDir = file("build/classes/groovy/test")
    }
  }

  dependencies {
    annotationProcessor platform(project(":klokwrk-project-platform"))
    implementation platform(project(":klokwrk-project-platform"))
    codenarc platform(project(":klokwrk-project-platform"))

    codenarc "org.codenarc:CodeNarc"
    codenarc "org.codehaus.groovy:groovy"
    codenarc "org.codehaus.groovy:groovy-templates"
  }
}
