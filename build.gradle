buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }

  dependencies {
    classpath "fr.brouillard.oss.gradle:gradle-jgitver-plugin:$gradleJgitverPluginVersion"
    classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
  }
}

// To enable "clean" task on the root project
apply plugin: "base"

apply plugin: "fr.brouillard.oss.gradle.jgitver"

jgitver {
  mavenLike true
  policy {
    pattern = "(.*)"
    transformations = ["IGNORE"]
  }
}

task jacocoAggregatedMerge(type: JacocoMerge) {
  afterEvaluate {
    Set<Project> jacocoSubprojects = subprojects.findAll { Project subproject -> subproject.pluginManager.hasPlugin('jacoco') }
    dependsOn jacocoSubprojects.test

    destinationFile file("${rootProject.buildDir}/jacoco/jacocoTestAggregated.exec")
    jacocoClasspath = jacocoSubprojects.first().configurations.jacocoAnt
    jacocoSubprojects.each { Project subproject ->
      executionData subproject.tasks.withType(Test)
    }

    doFirst {
      executionData = files(executionData.findAll { it.exists() })
    }
  }
}

task jacocoAggregatedReport(type: JacocoReport) {
  afterEvaluate {
    executionData jacocoAggregatedMerge.destinationFile as File
    dependsOn jacocoAggregatedMerge

    Set<Project> jacocoSubprojects = subprojects.findAll { Project subproject -> subproject.pluginManager.hasPlugin('jacoco') }
    jacocoClasspath = jacocoSubprojects.first().configurations.jacocoAnt

    sourceDirectories.from files(jacocoSubprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from files(jacocoSubprojects.sourceSets.main.output)

    reports {
      html.enabled = true
      html.outputLocation = file("${rootProject.buildDir}/reports/jacoco/jacocoTestAggregated/html")
    }
  }
}

configure(subprojects) {
  group = "net.croz.cargo-tracker"
}

configure(subprojects.findAll({ !["cargo-tracker-platform"].contains(it.name) })) { Project subproject ->
  repositories {
    mavenCentral()
  }

  apply plugin: "groovy"
  apply plugin: "maven-publish"
  apply plugin: "idea"
  apply plugin: "jacoco"

  java {
    sourceCompatibility = JavaVersion .VERSION_1_8
    targetCompatibility = JavaVersion .VERSION_1_8

    withSourcesJar()
  }

  test {
    jvmArgs = ["-noverify", "-XX:TieredStopAtLevel=1"]
    useJUnitPlatform()
  }

  jacoco {
    toolVersion = "$gradleJacocoLibraryVersion"
  }

  // When Groovy project contains Java files, and these Java files contain javadoc comments, javaparser-core needs to be added into groovydoc classpath (otherwise, groovydoc task might fail).
  // Do note that javaparser-core is a dependency of groovy-groovydoc, and its version should be updated when Groovy version changes.
  // Helpful documentation link: https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/GroovyRuntime.html
  Closure<FileCollection> createGroovyDocGroovyClasspath = { Project project ->
    Dependency javaParserDependency = project.getDependencies().create("com.github.javaparser:javaparser-core:$javaparserCoreVersion")
    FileCollection javaParserDependencyFileCollection = project.getConfigurations().detachedConfiguration(javaParserDependency)

    FileCollection groovyClasspath = project.groovyRuntime.inferGroovyClasspath(configurations.runtimeClasspath) + javaParserDependencyFileCollection
    return groovyClasspath
  }

  // Sometimes groovydoc needs additional dependencies in its classpath. With configuration bellow each subproject can configure additional groovydoc dependencies by using
  // groovydocExtendedClasspath. For example:
  //
  //   dependencies {
  //     ...
  //     groovydocExtendedClasspath "org.apache.tomcat.embed:tomcat-embed-core"
  //   }
  configurations {
    groovydocExtendedClasspath.extendsFrom(runtimeClasspath)
  }

  groovydoc {
    groovyClasspath = createGroovyDocGroovyClasspath(subproject) + subproject.configurations.groovydocExtendedClasspath
  }

  tasks.register("groovyDocJar", Jar) {
    dependsOn groovydoc
    classifier "groovydoc"
    from groovydoc.destinationDir
  }

  publishing {
    publications {
      myLibrary(MavenPublication) {
        from components.java
        artifact groovyDocJar
      }
    }
  }

  // NOTE: This fixes IDEA configuration of Groovy projects and this is necessary for IDEA to recognize spring metadata files generated by Spring Boot annotation processing.
  //       - https://youtrack.jetbrains.com/issue/IDEA-215137
  //       - https://youtrack.jetbrains.com/issue/IDEA-211520
  idea {
    module {
      inheritOutputDirs = false
      outputDir = file("build/classes/groovy/main")
      testOutputDir = file("build/classes/groovy/test")
    }
  }

  dependencies {
    implementation platform(project(":cargo-tracker-platform"))
    annotationProcessor platform(project(":cargo-tracker-platform"))
  }
}
